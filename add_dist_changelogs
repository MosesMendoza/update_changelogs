#/bin/sh
 
# script to update changelogs in submodules
# to include a new distribution. Run from the 
# packaging/deb directory
# arguments:
# 1. the name of the new dist, e.g. precise
# 2. the name of the branch off which to base new branch-specific builds


MODULE_DIRS=`ls -d */`
ERROR_LOG="submodule_errors"
NEW_DIST="${1}"
BASE_DIST="${2}"

# update a changelog
# arguments:
# 1. the dists string to add to the log

update_log(){
  message=`git log --oneline --no-merges -n1 --no-decorate --no-color --format="%s"`  
  dist=$1
  dhc --force-distribution -D "${dist}" -l puppet $message
}

# add the changelogs and commit the changes
commit(){
  git add debian/changelog
  git checkoutmmit -a -m "Update debian/changelog"
}

# error routine
# args
# 1. submodule with error
# 2. error string to write
error(){
  echo "ERROR '${2}' occurred on '${1}'. Wrote to '${ERROR_LOG}'"
  echo "ERROR '${1}' '{2}'" >> ${ERROR_LOG}
}

# check if a git branch exists for submodule. Switch
# to upstream first to avoid file/branch ambiguity on
# debian branches
# returns 1 if branch does not exist or error occurred
# args:
# 1. branch to check checkout
switch_to_branch(){
  git checkout upstream
  git checkout $1
  branch=`git branch | grep \* | awk '{print $NF}'`
  if [ branch = $1 ] ; then
    return 0
  else
    return 1
  fi
}

# check if git branch exists
# if exists, return 0. Else return 1
# args
# 1. the branch to check for
branch_exists(){
  exists=`git branch -a | grep "${1}" | cut -d '/' -f 3`
  if [ -z $exists ] ; then
    return 1
  else
    return 0
  fi
}

# On all modules, try to switch to a debian branch. Check if a dist-specific branch
# e.g. squeeze also exists. Error if both exist. Otherwise check changelog for new dist. If
# exists, don't update. Otherwise, update. If no debian branch exists, try switch
# to dist-specific branch, $2. Create a new branch for new dist, $1. Once on new branch
# modify changelog.

for dir in "${MODULE_DIRS}" ; do
  cd $dir
  switch_to_branch "debian"
  if [ $? -eq 0 ] ; then
    if (`branch_exists '${BASE_DIST}'`) ; then
      error "{$dir}" "Both debian and '${BASE_DIST}' branches exist"
    else
      # update log
      git reset --hard
      git pull origin debian
      cd debian
      cat changelog | grep "${NEW_DIST}"
      if [ $? -eq 1 ] ; then
        dists="lenny lucid squeeze '${NEW_DIST}'"
        update_log "${dists}"
      else
        echo "'${NEW_DIST}' already in changelog for '${dir}'"
      cd ..
      commit
      #git push origin debian
      fi
    fi
  else
    # check for new dist branch. If none, switch to dist-specific branch, make new branch, update log
    if (`branch_exists '${NEW_DIST}'`) ; then
      echo "Branch '${NEW_DIST}' already exists for '${dir}'"
    else
      if (`switch_to_branch "${BASE_DIST}"`) ; then
        git reset --hard
        git pull origin "${BASE_DIST}"
        git checkout -b "${NEW_DIST}"
        if [ $? -eq 0 ] ; then
          dists="${NEW_DIST}"
          update_log "${dists}"
          commit
          # git push "origin" '${NEW_DIST}'
        else
          error "${dir}" "git checkout -b failed. Unable to create new branch '${NEW_DIST}'"
        fi
      else
        error "${dir}" "git checkout failed. Unabled to switch to base branch '${BASE_DIST}'"
      fi
    fi
  fi
done


